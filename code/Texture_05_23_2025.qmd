---
title: "Texture_05_23_2025"
format: html
author: "Madelyn Willis"
---

### 1. Packages

```{r Load Libraries}
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(purrr)
library(tibble)
library(readxl)
library(writexl)
library(janitor)
library(aqp)
library(Hmisc)
library(soiltexture)
library(kableExtra)
library(knitr)
library(readr)
```

### 2. Load Data

```{r Pull Data, warning=FALSE}

#Step 1: pull data and calculate silt %
results_df <- list.files("../data_do_not_push/LPSA data", pattern = "\\.csv$", recursive = TRUE, full.names = TRUE) %>%
  map_dfr(function(file_path) {
    df <- read_csv(file_path, col_names = FALSE, show_col_types = FALSE) %>%
      filter(!if_all(everything(), is.na))

    if (nrow(df) >= 39 && ncol(df) >= 2) {
      folder_name <- basename(dirname(file_path))  # <-- gets the folder (date) name
      tibble(
        ID = as.character(df[4, 2][[1]]),
        clay = as.numeric(gsub("[^0-9\\.]", "", df[34, 2][[1]])),
        sand = as.numeric(gsub("[^0-9\\.]", "", df[39, 2][[1]])),
        sample_date = folder_name  # <-- new column added here
      )
    } else {
      NULL
    }
  }) %>%
  mutate(
    silt = 100 - (clay + sand),
    base_ID = str_remove(ID, "[A-Z]$"),
    letter = str_extract(ID, "[A-Z]$"))

```

### 3. Detect Failures

```{r detect failure, warning = FALSE}
# 2. Detect differences > 5 between replicates
check_differences <- function(df) {
  n <- nrow(df)
  if (n < 2) return(tibble())
  combn(n, 2, simplify = FALSE) %>%
    map_dfr(~{
      row1 <- df[.x[1], ]
      row2 <- df[.x[2], ]
      tibble(
        base_ID = row1$base_ID,
        ID_1 = row1$ID,
        ID_2 = row2$ID,
        diff_sand = abs(row1$sand - row2$sand),
        diff_clay = abs(row1$clay - row2$clay),
        diff_silt = abs(row1$silt - row2$silt)
      )
    }) %>%
    filter(diff_sand > 5 | diff_clay > 5 | diff_silt > 5)
}

failures_df <- results_df %>%
  group_by(base_ID) %>%
  group_map(~ check_differences(.x)) %>%
  bind_rows()

# failures_table <- failures_df %>%
#   kable(caption = "Replicate Pairs with >5% Difference in Texture Components", format = "html") %>%
#   kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# failures_table


```

### 4. Texture for all samples

```{r All Samples, warning = FALSE}
# Step 3: Main texture class
selected_data <- results_df %>% 
  select(CLAY = clay, SILT = silt, SAND = sand) %>%
  as.data.frame()

texture_classes <- TT.points.in.classes(
  tri.data = selected_data,
  class.sys = "USDA.TT"
)
TT.plot(
  tri.data = selected_data,
  class.sys = "USDA.TT",
  col = "black",
  pch = 19,
  cex = 0.5,
  main = "Texture Classes for All Soil Samples"
)
# Extract primary and boundary info
texture_info <- apply(texture_classes, 1, function(x) {
  max_val <- max(x)
  classes <- colnames(texture_classes)[which(x == max_val)]
  list(
    primary = classes[1],  # first class if tie
    is_boundary = length(classes) > 1,
    boundary_classes = if(length(classes) > 1) paste(classes, collapse = " / ") else NA_character_
  )
})

# Add results back to results_df
results_df <- results_df %>%
  mutate(
    primary_texture = sapply(texture_info, `[[`, "primary"),
    is_boundary = sapply(texture_info, `[[`, "is_boundary"),
    boundary_classes = sapply(texture_info, `[[`, "boundary_classes")
  )

# Map USDA texture names to simplified classes
results_df <- results_df %>%
  mutate(
    texture_class = case_when(
      primary_texture == "SaClLo" ~ "SCL",
      primary_texture == "Clo" ~ "CL",
      primary_texture == "SaLo" ~ "SL",
      primary_texture == "SaCl" ~ "SC",
      primary_texture == "Lo" ~ "L",
      primary_texture == "LoSa" ~ "LS",
      primary_texture == "S" ~ "S",
      primary_texture == "Cl" ~ "C",
      primary_texture == "Si" ~ "SI",
      primary_texture == "SiL" ~ "SIL",
      primary_texture == "SiCl" ~ "SIC",
      primary_texture == "SiClLo" ~ "SICL",
      primary_texture == "SiLo" ~ "SIL",
      primary_texture == "Sa" ~ "S",
      TRUE ~ as.character(primary_texture)
    )
  )


results_df <- results_df %>%
  dplyr::select(ID = ID, CLAY = clay, SAND = sand, SILT = silt, texture_class, is_boundary, boundary_classes, base_ID, sample_date) 

results_table <- results_df %>%
  kable(caption = "Texture Classifications for All Soil Samples", format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  scroll_box(height = "400px")
results_table

# write.csv(results_df, "../output (DO NOT PUSH)//all_results_texture_05_23_2025.csv", row.names = FALSE)  # <-- include per-sample output too

```

### 5. Texture for grouped IDs

```{r Grouped IDs, warning = FALSE}
# Count number of replicates per base_ID
replicate_counts <- results_df %>%
  count(base_ID) %>%
  filter(n > 1)

# Filter results_df to only those base_IDs with >1 replicate
filtered_results_df <- results_df %>%
  filter(base_ID %in% replicate_counts$base_ID)

# Now summarize filtered data
summary_df <- filtered_results_df %>%
  group_by(base_ID) %>%
  summarise(
    SAND = mean(SAND, na.rm = TRUE),
    SILT = mean(SILT, na.rm = TRUE),
    CLAY = mean(CLAY, na.rm = TRUE),
    .groups = "drop"
  )

selected_data <- summary_df %>%
  select(CLAY,SILT,SAND) %>%
  as.data.frame()

summary_matrix <-  TT.points.in.classes(
  tri.data = selected_data %>%
    select(CLAY, SILT, SAND),
  class.sys = "USDA.TT")

summary_raw_names <- apply(summary_matrix, 1, function(x) colnames(summary_matrix)[which(x == 1)][1])

summary_df$texture_class <- case_when(
  summary_raw_names == "SaClLo" ~ "SCL",
  summary_raw_names == "Clo" ~ "CL",
  summary_raw_names == "SaLo" ~ "SL",
  summary_raw_names == "SaCl" ~ "SC",
  summary_raw_names == "Lo" ~ "L",
  summary_raw_names == "LoSa" ~ "LS",
  summary_raw_names == "S" ~ "S",
  summary_raw_names == "Cl" ~ "C",
  summary_raw_names == "Si" ~ "SI",
  summary_raw_names == "SiL" ~ "SIL",
  summary_raw_names == "SiCl" ~ "SIC",
  summary_raw_names == "SiClLo" ~ "SICL",
  summary_raw_names == "SiLo" ~ "SIL",
  summary_raw_names == "Sa" ~ "S",
  TRUE ~ summary_raw_names
)

summary_df <- summary_df %>%
  dplyr::select(ID = base_ID, CLAY, SAND, SILT, texture_class) %>%
  mutate(CLAYPCT = CLAY / 100,
         SANDPCT = SAND / 100) %>%
  clean_names()

# Join sample_date back in, based on filtered results
summary_df <- summary_df %>%
  left_join(filtered_results_df %>% select(base_ID, sample_date) %>% distinct(), by = c("id" = "base_ID")) %>%
# Remove duplicates
  distinct(id, .keep_all = TRUE) %>%
  arrange(sample_date)
summary_table <- summary_df %>%
  kable(caption = "Averaged Texture Classes by ID (replicates are grouped)", format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
summary_table
#write as csv:
today <- format(Sys.Date(), "%m_%d_%Y")
filename <- paste0("../output_do_not_push/summarized_texture_", today, ".csv")
# write.csv(summary_df, filename, row.names = FALSE)
```


### 6. Texture Differences in Failures

```{r Complete Fails}
# Add texture class for ID_1 and ID_2 
failures_df <- failures_df %>%
  left_join(results_df %>% select(ID, texture_class), by = c("ID_1" = "ID")) %>%
  rename(texture_class_1 = texture_class) %>%
  left_join(results_df %>% select(ID, texture_class), by = c("ID_2" = "ID")) %>%
  rename(texture_class_2 = texture_class)

# Filter for differences in texture class
failures_diff_texture <- failures_df %>%
  filter(texture_class_1 != texture_class_2)
# Create table of failures with texture differences
failures_diff_texture_table <- failures_diff_texture %>%
  kable(caption = "Failed Textures: Must redo textures:", format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
failures_diff_texture_table

```

### 7. Particle Size Classifications

```{r Particle Class}


df_raw <- read.csv("../data_do_not_push/LPSA data/June 2nd, 2025/Perry_250333A_ 2 Jun 2025_08-24_30.$av..csv", header = FALSE, stringsAsFactors = FALSE)

particle_table <- df_raw[67:nrow(df_raw), c("V1", "V2")]
colnames(particle_table) <- c("diameter_um", "volume_pct")

# Convert to numeric
particle_table$diameter_um <- as.numeric(particle_table$diameter_um)
particle_table$volume_pct <- as.numeric(particle_table$volume_pct)

# Drop any rows that are NA (in case the file has blank lines at the end)
particle_table <- particle_table[!is.na(particle_table$diameter_um) & !is.na(particle_table$volume_pct), ]

# View result
head(particle_table)
summary(particle_table)

# Replace these with your actual limits and class names
custom_classes <- data.frame(
  class = c(
    "fine_clay", "coarse_clay", "fine_silt", "coarse_silt",
    "very_fine_sand", "fine_sand", "medium_sand", "coarse_sand", "very_coarse_sand",
    "fine_gravel", "medium_gravel", "coarse_gravel", "cobbles", "stones", "boulders"
  ),
  upper_um = c(
    0.2, 2, 20, 50, 100, 250, 500, 1000, 2000,
    5000, 20000, 76000, 250000, 600000, Inf
  )
)

assign_custom_class <- function(d) {
  idx <- which(d <= custom_classes$upper_um)[1]
  custom_classes$class[idx]
}

particle_table$custom_class <- sapply(particle_table$diameter_um, assign_custom_class)

class_summary <- aggregate(volume_pct ~ custom_class, data = particle_table, sum)
print(class_summary)

# Assign your fine classes to USDA groups
clay_classes <- c("fine_clay", "coarse_clay")
silt_classes <- c("fine_silt", "coarse_silt")
sand_classes <- c("very_fine_sand", "fine_sand", "medium_sand", "coarse_sand", "very_coarse_sand")

# For subclass rules, keep the sand splits
sand_subclasses <- c("very_coarse_sand", "coarse_sand", "medium_sand", "fine_sand", "very_fine_sand")

# Calculate broad fractions
pct_clay <- sum(class_summary$volume_pct[class_summary$custom_class %in% clay_classes])
pct_silt <- sum(class_summary$volume_pct[class_summary$custom_class %in% silt_classes])
pct_sand <- sum(class_summary$volume_pct[class_summary$custom_class %in% sand_classes])

# For sand splits
pct_vcs <- class_summary$volume_pct[class_summary$custom_class == "very_coarse_sand"]
pct_cs  <- class_summary$volume_pct[class_summary$custom_class == "coarse_sand"]
pct_ms  <- class_summary$volume_pct[class_summary$custom_class == "medium_sand"]
pct_fs  <- class_summary$volume_pct[class_summary$custom_class == "fine_sand"]
pct_vfs <- class_summary$volume_pct[class_summary$custom_class == "very_fine_sand"]

# If any are missing, make sure they're 0
if(length(pct_vcs)==0) pct_vcs <- 0
if(length(pct_cs)==0) pct_cs <- 0
if(length(pct_ms)==0) pct_ms <- 0
if(length(pct_fs)==0) pct_fs <- 0
if(length(pct_vfs)==0) pct_vfs <- 0

assign_usda_texture_subclass <- function(pct_clay, pct_silt, pct_sand, 
                                         pct_vcs, pct_cs, pct_ms, pct_fs, pct_vfs) {
  # SAND GROUPS (Sands, coarse sand, sand, fine sand, very fine sand)
  if (pct_sand > 85 && (pct_silt + 1.5 * pct_clay) < 15) {
    if ((pct_vcs + pct_cs) >= 25 && max(pct_ms, pct_fs, pct_vfs) < 50) {
      return("coarse sand")
    } else if ((pct_fs >= 50 && pct_fs > pct_vfs) ||
               ((pct_vcs + pct_cs + pct_ms) < 25 && pct_vfs < 50)) {
      return("fine sand")
    } else if (pct_vfs >= 50) {
      return("very fine sand")
    } else {
      return("sand")
    }
  }
  # LOAMY SANDS (apply similar logic for loamy subclasses)
  if (pct_sand >= 70 && pct_sand <= 90 && (pct_silt + 1.5 * pct_clay) >= 15 && (pct_silt + 2*pct_clay) < 30) {
    if ((pct_vcs + pct_cs) >= 25 && max(pct_ms, pct_fs, pct_vfs) < 50) {
      return("loamy coarse sand")
    } else if ((pct_fs >= 50 && pct_fs > pct_vfs) ||
               ((pct_vcs + pct_cs + pct_ms) < 25 && pct_vfs < 50)) {
      return("loamy fine sand")
    } else if (pct_vfs >= 50) {
      return("loamy very fine sand")
    } else {
      return("loamy sand")
    }
  }
  # SANDY LOAMS
  if (((pct_clay >= 7 && pct_clay < 20 && pct_sand > 52 && (pct_silt + 2*pct_clay) >= 30)) ||
      (pct_clay < 7 && pct_silt < 50 && (pct_silt + 2*pct_clay) >= 30)) {
    return("sandy loam")
  }
  # LOAM
  if (pct_clay >= 7 && pct_clay < 27 && pct_silt >= 28 && pct_silt < 50 && pct_sand <= 52) {
    return("loam")
  }
  # SILT LOAM
  if ((pct_silt >= 50 && pct_clay >= 12 && pct_clay < 27) ||
      (pct_silt >= 50 && pct_silt < 80 && pct_clay < 12)) {
    return("silt loam")
  }
  # SILT
  if (pct_silt >= 80 && pct_clay < 12) {
    return("silt")
  }
  # SANDY CLAY LOAM
  if (pct_clay >= 20 && pct_clay < 35 && pct_silt < 28 && pct_sand > 45) {
    return("sandy clay loam")
  }
  # CLAY LOAM
  if (pct_clay >= 27 && pct_clay < 40 && pct_sand > 20 && pct_sand <= 45) {
    return("clay loam")
  }
  # SILTY CLAY LOAM
  if (pct_clay >= 27 && pct_clay < 40 && pct_sand <= 20) {
    return("silty clay loam")
  }
  # SANDY CLAY
  if (pct_clay >= 35 && pct_sand > 45) {
    return("sandy clay")
  }
  # SILTY CLAY
  if (pct_clay >= 40 && pct_silt >= 40) {
    return("silty clay")
  }
  # CLAY
  if (pct_clay >= 40 && pct_sand <= 45 && pct_silt < 40) {
    return("clay")
  }
  # If none fit, return "unclassified"
  return("unclassified")
}

# Call with your numbers:
usda_texture <- assign_usda_texture_subclass(
  pct_clay, pct_silt, pct_sand, pct_vcs, pct_cs, pct_ms, pct_fs, pct_vfs
)

cat("USDA texture class/subclass:", usda_texture, "\n")
```

```{r}
# library(soiltexture)
# library(dplyr)
# 
# # Assuming `selected_data` has columns: clay, silt, sand, base_ID
# 
# # Step 1: Define color palette and assign to base_ID
# unique_ids <- unique(selected_data$base_ID)
# colors <- rainbow(length(unique_ids))
# names(colors) <- unique_ids
# 
# # Step 2: Assign colors to each row based on base_ID
# selected_data$color <- colors[selected_data$base_ID]
# 
# # Step 3: Plot with color
# TT.plot(
#   tri.data = selected_data,
#   class.sys = "USDA.TT",
#   col = selected_data$color,
#   pch = 19,
#   cex = 0.5,
#   main = "Texture Classes Colored by Base ID"
# )
# # Step 4: Add legend
# legend("topright", legend = unique_ids, col = colors, pch = 19, cex = 0.6)

```

